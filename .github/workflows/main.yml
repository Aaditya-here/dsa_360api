name: Deploy DSA360 App to EC2

on:
  workflow_dispatch:  # Allows manual triggering of the workflow
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'

jobs:
  deploy:
    if: github.ref == 'refs/heads/main'  # Ensures the workflow runs only for the main branch
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Set up Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.20.5'

    # Step 3: Install dependencies
    - name: Install Dependencies
      run: npm ci

    # Step 4: Build the Angular App
    - name: Build Angular App
      run: npm run build -- --configuration production

    # Step 5: Prepare the target directory on EC2 (clean up, create, and set permissions)
    - name: Prepare Target Directory on EC2
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        port: ${{ secrets.DEPLOY_PORT }}
        script: |
          # Clean up old files in the target directory
          rm -rf ${{ secrets.DEPLOY_TARGET }}/*
          
          # Create target directory if it doesn't exist
          mkdir -p ${{ secrets.DEPLOY_TARGET }}

          # Set permissions for the directory
          sudo chown -R ec2-user:ec2-user ${{ secrets.DEPLOY_TARGET }}
          sudo chmod -R u+w ${{ secrets.DEPLOY_TARGET }}

    # Step 6: Compress build artifacts
    - name: Archive Build Artifacts
      run: tar -czf exam-dist.tar.gz -C dist/exam .

    # Step 7: Transfer Build Artifacts to EC2
    - name: Transfer Build Artifacts
      uses: appleboy/scp-action@v0.1.6
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        port: ${{ secrets.DEPLOY_PORT }}
        source: exam-dist.tar.gz
        target: ${{ secrets.DEPLOY_TARGET }}

    # Debug Step: Check if file is transferred successfully
    - name: Verify Transfer Location
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        port: ${{ secrets.DEPLOY_PORT }}
        script: |
          # Print the location where the tarball is transferred
          echo "Checking the location of exam-dist.tar.gz in ${DEPLOY_TARGET}"
          ls -l ${{ secrets.DEPLOY_TARGET }}
          echo "Listing files in the target directory:"
          ls -l ${{ secrets.DEPLOY_TARGET }}/

    # Step 8: Deploy to EC2 and extract tarball, then delete it
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        port: ${{ secrets.DEPLOY_PORT }}
        script: |
          # Check if the tarball exists
          echo "Looking for tarball at: ${{ secrets.DEPLOY_TARGET }}/exam-dist.tar.gz"
          if [ -f ${{ secrets.DEPLOY_TARGET }}/exam-dist.tar.gz ]; then
            echo "Tarball exists, extracting..."
            tar -xzf ${{ secrets.DEPLOY_TARGET }}/exam-dist.tar.gz -C ${{ secrets.DEPLOY_TARGET }}
            echo "Extraction completed. Deleting tarball..."
            rm -f ${{ secrets.DEPLOY_TARGET }}/exam-dist.tar.gz
            echo "Tarball deleted."
          else
            echo "Tarball does not exist, aborting deployment."
            exit 1
          fi

    # Step 9: Restart and Reload Nginx
    - name: Restart and Reload Nginx
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        port: ${{ secrets.DEPLOY_PORT }}
        script: |
          echo "Restarting Nginx server..."
          sudo systemctl restart nginx
          echo "Reloading Nginx configuration..."
          sudo systemctl reload nginx
